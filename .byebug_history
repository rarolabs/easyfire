q
@has_many
value
q
@has_many
q
spec.associations.select{|k,v| v[:type] == :belongs_to}
spec.associations.select{|k,v| v[:type] }
spec.associations.select{|k,v| v[:type] == ""}
spec.associations.to_a.find{|e| e[0][1][0][:type]}
spec.associations.to_a.find{|e| e[0][1][0]}
spec.associations.to_a.find{|e| e[0][1][1]}
spec.associations.to_a.find{|e| e[0][1]}
spec.associations.to_a.find{|e| e[0][1][:type]}
spec.associations.to_a.find{|e| e[0][1][:type] == :belongs_to}
spec.associations.to_a.find{|e| e[0][1][:type]}
spec.associations.to_a.find{|e| e[0][1][:type}
spec.associations.to_a.find{|e| e[0][1]}
spec.associations.to_a.find{|e| e}
spec.associations.to_a.find{|e|
spec.associations.to_a.find
spec.associations.to_a.filter
spec.associations.to_a
spec.associations.to_a.filter{|e| e[0][1][:type]}
spec.associations.to_a.collect{|e| e[0][1][:type]}
spec.associations.to_a.collection{|e| e[0][1][:type]}
spec.associations.to_a.find{|e| e[0][1][:type]}
spec.associations.find{|e| e[0][1][:type]}
spec.associations.collection{|e| e[0][1][:type]}
spec.associations.to_a[0][1][:type]
spec.associations.to_a[0][1]
spec.associations.to_a[0].class
spec.associations.to_a[0].value
spec.associations.to_a[0].values
spec.associations.to_a[0]
spec.associations.to_a
spec.associations.values
spec.associations[0]
spec.associations
c
eval(content)
q
eval(content)
content
q
eval(content)
 content = IO.read(file)
eval(content)
content
eval(content)
q
c
eval(content)
 content = IO.read(file)
eval(content)
 content = IO.read(file)
eval(content)
c
IO.read(file)
c
content
c
className
s
Dir["#{options[:source]}/*"]
c
 Dir["#{options[:source]}/*"]
q
Dir["#{options[:source]}/*"]
"#{options[:source]}/*"
Dir["#{options[:source]}/*"]
q
foo
foo = eval(content)
eval(content)
content
c
q
Q
File.dirname(__FILE__)
q
value[:type].gsub("EF","").to_sym
value[:type]
@parents
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
type_to_java_value(value[:type])c
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
q
@parents.map{|e| ""}.join(",")
@parents.map{|e| ""}
@parents
c
@parents
c
q
spec.parents
c
spec.parents
@class_name_ef
c
@class_name_ef
spec.parents
q
specq
spec.parents
c
spec.model_name
c
spec.model_name
c
spec.model_name
spec.name
c
spec.model_name
@spec
c
q
spec.model_name
c
spec.model_name
c
spec.model_name
spec
c
q
spec.model_name
q
spec
spec.name
spec
q
spec
q
spec
spec.instance_variable_get(:@ddescription)
spec.instance_variable_get(:@description)
spec.instance_variable_get
spec.get_instance_variables("@description")
spec.get_instance_variable("@description")
spec.instance_variables
spec
c
q
spec
q
spec[1].attributesx
spec[1].attributes
spec[0]
spec
c
q
c
spec[1][:attributes].keys
spec
c
"#{attribute_name.to_s.uncapitalize}EFPath"
c
"#{attribute_name.to_s.uncapitalize}EFPath"
q
spec[1][:attributes].keys
spec[1][:attributes]
spec[1]["attributes"]
spec[1]
spec
q
c
@name
c
@name
c
@name
c
@name
c
@name
value
c
q
@@spec
c
@@spec
c
@@spec
text
c
@@spec
self.name
text
c
text
c
@@spec
c
@@spec
c
@@spec
c
@@spec
c
@@spec
c
@@spec
c
@@spec
c
@@spec
c
@@spec
c
@@spec["Grupo"]
@@spec.keys
@@spec.last
@@spec.count
@@spec["Chat"]
@@spec
c
@@spec
c
q
@@spec["Chat"]
@@spec
