c
 Dir["#{options[:source]}/*"]
q
Dir["#{options[:source]}/*"]
"#{options[:source]}/*"
Dir["#{options[:source]}/*"]
q
foo
foo = eval(content)
eval(content)
content
c
q
Q
File.dirname(__FILE__)
q
value[:type].gsub("EF","").to_sym
value[:type]
@parents
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
type_to_java_value(value[:type])c
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
c
type_to_java_value(value[:type])
q
@parents.map{|e| ""}.join(",")
@parents.map{|e| ""}
@parents
c
@parents
c
q
spec.parents
c
spec.parents
@class_name_ef
c
@class_name_ef
spec.parents
q
specq
spec.parents
c
spec.model_name
c
spec.model_name
c
spec.model_name
spec.name
c
spec.model_name
@spec
c
q
spec.model_name
c
spec.model_name
c
spec.model_name
spec
c
q
spec.model_name
q
spec
spec.name
spec
q
spec
q
spec
spec.instance_variable_get(:@ddescription)
spec.instance_variable_get(:@description)
spec.instance_variable_get
spec.get_instance_variables("@description")
spec.get_instance_variable("@description")
spec.instance_variables
spec
c
q
spec
q
spec[1].attributesx
spec[1].attributes
spec[0]
spec
c
q
c
spec[1][:attributes].keys
spec
c
"#{attribute_name.to_s.uncapitalize}EFPath"
c
"#{attribute_name.to_s.uncapitalize}EFPath"
q
spec[1][:attributes].keys
spec[1][:attributes]
spec[1]["attributes"]
spec[1]
spec
q
c
@name
c
@name
c
@name
c
@name
c
@name
value
c
q
@@spec
c
@@spec
c
@@spec
text
c
@@spec
self.name
text
c
text
c
@@spec
c
@@spec
c
@@spec
c
@@spec
c
@@spec
c
@@spec
c
@@spec
c
@@spec
c
@@spec
c
@@spec["Grupo"]
@@spec.keys
@@spec.last
@@spec.count
@@spec["Chat"]
@@spec
c
@@spec
c
q
@@spec["Chat"]
@@spec
c
@@spec
c
q
@@spec
c
@@spec
@@spec["Chat"]
@@spec[self.name]["Chat"]
@@spec[self.name]["Chat"
self.name
@@spec.keys
c
@@spec[self.name] ||= Spec
@@spec[self.name]
self.name
@@spec
q
@@spec[self.name]
q
@@spec[self.name]
@@spec.keys
q
self.name
[self.name
q
@belongs_to[key.to_s.gsub(/EFPath/,'').camelcase.to_sym]q
@belongs_to[key.to_s.gsub(/EFPath/,'').camelcase.to_sym]
@belongs_to[key.to_s.gsub(/EFPath/,'')camelcase.to_sym]
key.to_s.gsub(/EFPath/,'').camelcase.to_sym
@belongs_to
key.to_s.gsub(/EFPath/,'').to_sym
@belongs_to[key.to_s.gsub(/EFPath/,'').to_sym]
 key.to_s.end_with?("EFPath")
q
c
q
value
q
"#{attribute_name.to_s.uncapitalize}Path"
attribute_name.to_s.uncapitalize
attribute_name.to_s.undercapitalize
attribute_name.to_s
attribute_name
q
spec[1][:associations]
c
"asa".underscore
q
"asa".underscore
c
q
Renders::GEM_ROOTq
Renders::GEM_ROOT
q
y
Chat.to_spec[1][:attributes].to_a.map{|e| "#{e[0].to_s}: #{e[1][:type]}"}.join("\n,")q
Chat.to_spec[1][:attributes].to_a.map{|e| "#{e[0].to_s}: #{e[1][:type]}"}.join("\n,")
Chat.to_spec[1][:attributes].to_a.map{|e| "#{e[0].to_s}: #{e[1][:type]}"}
Chat.to_spec[1][:attributes].to_a.map{|e| "#{e[0].to_s}: e[1][:type]"}
Chat.to_spec[1][:attributes].to_a.map{|e| "#{e[0].to_s}:"}
Chat.to_spec[1][:attributes].to_a.map{|e| e[0].to_s}
Chat.to_spec[1][:attributes].to_a.map{|e| e[0]}
Chat.to_spec[1][:attributes].to_a.map{|e| e[0]
Chat.to_spec[1][:attributes].to_a.count
