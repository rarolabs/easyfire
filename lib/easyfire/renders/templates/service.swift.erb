/**********************************************************
 * <%= @service_class %>.swift
 * Firebase Services
 * Version: <%=@version%>
 * Generated by Easyfire. Do not modify this code 
 **********************************************************/
import Foundation
import FirebaseDatabase

class <%= @name %>ServiceEF{
    
    private var childListenerRef:             DatabaseReference? = nil
    
    private var valueEventListener:           DatabaseHandle?    = nil
    private var valueListenerRef:             DatabaseReference? = nil
    
    private var firstPageChildEventListener:  DatabaseHandle?    = nil
    private var childPaginateListenerRef:     DatabaseReference? = nil
    
    private var oldestKeyYouveSeen:           String?            = nil
    
    
    
    func getRef() -> DatabaseReference {
        return Database.database().reference(withPath: getCollectionName())
    }
    
    func getRef(path: String?) -> DatabaseReference {
        if path == nil || path == ""{
            return Database.database().reference(withPath: getCollectionName())
        }
        return Database.database().reference(withPath: getCollectionName() + "/" + path! )
    }
    
    func getRef(path: String?,key: String) -> DatabaseReference {
        
        if path != nil && path != ""{
            return Database.database().reference(withPath: getCollectionName() + "/" + key)
        }
        
        return Database.database().reference(withPath: getCollectionName() + "/" + path!  + "/" + key)
    }

    func getCollectionName() -> String {
        return "<%= @collection_name %>"
    }

    func createModelFrom(snapshot: DataSnapshot) -> <%= @class_name_ef %>?{
        return <%= @class_name_ef %>(snapshot: snapshot)
    }
    
    func createModelFrom(key: String) -> <%= @class_name_ef %>?{
        return <%= @class_name_ef %>(key: key)
    }
    
    func retrieve(key: String,parentKeys: [String], complete: @escaping (Error?,<%= @class_name_ef %>?) -> () ){
        let localRef = getRef(path: parentKeys.joined(separator: "/"), key: key)
        findByPath(ref: localRef, complete: complete)
    }
    
    func retrieve(path: String, complete: @escaping (Error?,<%= @class_name_ef %>?) -> ()){
        let localRef = getRef(path: path)
        findByPath(ref: localRef, complete: complete)
    }
    
    func findByPath(ref: DatabaseReference, complete: @escaping (Error?,<%= @class_name_ef %>?) -> ()){

        ref.observeSingleEvent(of: .value, with: { (snapshot) in
            if snapshot.value is NSDictionary{
                let model : <%= @class_name_ef %>? = self.createModelFrom(snapshot: snapshot)
                complete(nil,model)
            }
            
        }) { (error) in
            print(error.localizedDescription)
            complete(error, nil)
        }
    }
    
    func store(object: <%= @class_name_ef %>, complete: @escaping (Error?,<%= @class_name_ef %>?) -> ()){
        
        let model = object
        var localRef = getRef(path: model.parentKeys.joined(separator: "/"))

        if let key = object.key {
            localRef = localRef.child(key)
        }else{
            localRef = localRef.childByAutoId()
        }
        
        model.key = localRef.key
        
        localRef.setValue(model.toAnyObject()) { (error, ref) in
            
            if error == nil {
                complete(nil,model)
            }else{
                complete(error,nil)
            }
        }
    }
    
    
    func delete(object: <%= @class_name_ef %>, complete: @escaping (Error?,Bool?) -> ()){
        let localRef = getRef(path: object.parentKeys.joined(separator: "/") )
        localRef.child(object.key!).removeValue { (error, ref) in
            complete(error, error == nil)
        }
    }
    
    func deleteAll(complete: @escaping (Error?,Bool?) -> ()){
        let localRef = getRef(path: "" )
        localRef.removeValue() {(error, ref) in
            complete(error, error == nil)
        }
    }
    

    func startListValueChanges(parentKeys: [String],delegate: @escaping (Error?,<%= @class_name_ef %>?) -> ()){
        
        self.stopListValueChanges()
        valueListenerRef = getRef(path: parentKeys.joined(separator: "/"))
        
        valueEventListener = valueListenerRef?.observe(.value, with: { (snapshot) in
            if snapshot.exists() {
                for child in snapshot.children {
                    let model : <%= @class_name_ef %>? = self.createModelFrom(snapshot: child as! DataSnapshot)
                    delegate(nil,model)
                }
                
            }
        }){ (error) in
            print(error.localizedDescription)
            delegate(error,nil)
        }
    }

    
    func stopListValueChanges(){
        
        if let ref = valueListenerRef {
            if let listener = valueEventListener {
                ref.removeObserver(withHandle: listener)
            }
        }
    }
    
    func startListChildChanges(parentKeys: [String], delegate: @escaping (Error?,<%= @class_name_ef %>?,DataEventType?) -> ()){
        
        self.stopListValueChanges()
        childListenerRef = getRef(path: parentKeys.joined(separator: "/"))
        
        childListenerRef?.observe(.childAdded, with: { (snapshot) in
            if snapshot.exists() {
                let model : <%= @class_name_ef %>? = self.createModelFrom(snapshot: snapshot)
                delegate(nil,model,.childAdded)
            }
        })
        childListenerRef?.observe(.childChanged, with: { (snapshot) in
            if snapshot.exists() {
                let model : <%= @class_name_ef %>? = self.createModelFrom(snapshot: snapshot)
                delegate(nil,model,.childChanged)
            }
        })
        childListenerRef?.observe(.childRemoved, with: { (snapshot) in
            let model : <%= @class_name_ef %>? = self.createModelFrom(key: snapshot.key)
            delegate(nil,model,.childRemoved)
        })
    }
    
    func stopListChildChanges(){
        
        if let ref = childListenerRef {
            ref.removeAllObservers()
        }
    }
    
    func startTracking(path: String, delegate: @escaping (Error?,<%= @class_name_ef %>?) -> ()){
        self.stopTracking(path: path)
        let localRef = getRef(path: path)
        
        localRef.observe(.value, with: { (snapshot) in
            if snapshot.exists() {
                let model : <%= @class_name_ef %>? = self.createModelFrom(snapshot: snapshot)
                delegate(nil,model)
            }
        }){ (error) in
            print(error.localizedDescription)
            delegate(error,nil)
        }
    }
    
    func stopTracking(path: String){
        getRef().child(path).removeAllObservers()
    }
    
    func getChildCollection(parentKeys: [String], complete: @escaping (Error?,[<%= @class_name_ef %>]?) -> ()) {
      
       let localRef = getRef(path: parentKeys.joined(separator: "/"))
       localRef.observe(.value, with: { (snapshot) in
           if snapshot.exists() {
               var values : [<%= @class_name_ef %>] = []
               for child in snapshot.children {
                   let model : <%= @class_name_ef %>? = self.createModelFrom(snapshot: child as! DataSnapshot)
                   values.append(model!)
               }
               complete(nil,values)
           }

       }) { (error) in
           print(error.localizedDescription)
           complete(error,nil)

       }
    }
       
       
    func startPagination(pageSize: Int, parentKeys: [String], delegate: @escaping (Error?,<%= @class_name_ef %>?) -> ()){

        self.oldestKeyYouveSeen = nil
        self.childPaginateListenerRef = getRef(path: parentKeys.joined(separator: "/"))
        
        childPaginateListenerRef?.queryOrderedByKey().queryLimited(toLast: UInt(pageSize)).observe(.childAdded, with: { (snapshot) in
            
            if self.oldestKeyYouveSeen == nil {
                self.oldestKeyYouveSeen = snapshot.key
            }
            
            if snapshot.exists() {
                let model : <%= @class_name_ef %>? = self.createModelFrom(snapshot: snapshot)
                delegate(nil, model)
            }
            
        }){ (error) in
            print(error.localizedDescription)
            delegate(error,nil)
        }
    }
    
    
    func nextPage(pageSize: Int, delegate: @escaping (Error?,<%= @class_name_ef %>?) -> ()){
        
        let start = self.oldestKeyYouveSeen
        self.oldestKeyYouveSeen = nil
        
        if start != nil {
            childPaginateListenerRef?.queryOrderedByKey().queryEnding(atValue: start).queryLimited(toLast: UInt(pageSize)).observe(.childAdded, with: { (snapshot) in
                
                if (self.oldestKeyYouveSeen == nil) {
                    self.oldestKeyYouveSeen = snapshot.key
                }
                if snapshot.exists() {
                    let model : <%= @class_name_ef %>? = self.createModelFrom(snapshot: snapshot)
                    delegate(nil,model)
                }
                
            }){ (error) in
                print(error.localizedDescription)
                delegate(error,nil)
            }
        }
    }
}


