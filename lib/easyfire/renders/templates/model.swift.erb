/**********************************************************
 * <%=@name%>EM.swift
 * <%=@description%>
 * Version: <%=@version%>
 * Generated by Easyfire. Do not modify this code 
 **********************************************************/
 
import Foundation
import Firebase

struct <%= @name %> : Equatable {
    
    let key: String?
    
    <%@attributes.each do |key,value|%>
    //<%=value[:description]%>
    let <%=key%>: <%=type_to_swift_value(value[:type])%>;
    <%end%>
    
    init( <%=@attributes.to_a.map{|e| "#{e[0].to_s}: #{type_to_swift_value(e[1][:type])}"}.join(",\n          ")%> ) {
      
          <%=@attributes.to_a.map{|e| "self.#{e[0].to_s} = #{e[0].to_s}"}.join("\n          ")%>
    
    }
         
    
    init( snapshot: DataSnapshot ) {
      
      key = snapshot.key
      let snapshotValue = snapshot.value as! [String: AnyObject]
      
      <%=@attributes.to_a.map{|e| "self.#{e[0].to_s} = snapshotValue[\"#{e[0].to_s}\"] as? #{type_to_swift_value(e[1][:type])} ?? #{swift_default_value(e[1][:type])}" }.join("\n      ")%>
    
    }
    

    init( snapshot: DataSnapshot ) {
      
      key = snapshot.key
      let snapshotValue = snapshot.value as! [String: AnyObject]
      
      <%=@attributes.to_a.map{|e| "self.#{e[0].to_s} = snapshotValue[\"#{e[0].to_s}\"] as? #{type_to_swift_value(e[1][:type])} ?? #{swift_default_value(e[1][:type])}" }.join("\n      ")%>
    
    }

    init( key: String ) {
      
      self.key = key
      <%=@attributes.to_a.map{|e| "self.#{e[0].to_s} = #{swift_default_value(e[1][:type])}" }.join("\n      ")%>
    }
      
    func toAnyObject() -> Any {
        return [
           <%=@attributes.to_a.map{|e| "\"#{e[0].to_s}\" : #{e[0].to_s} ?? #{swift_default_value(e[1][:type])}" }.join(",\n           ")%>            
        ]
    }
    
    static func ==(lhs: <%= @name %>, rhs: <%= @name %>) -> Bool {
        return lhs.key == rhs.key
    }
    
}