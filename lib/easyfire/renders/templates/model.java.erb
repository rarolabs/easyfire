
/**********************************************************
 * <%=@class_name_ef%>.java
 * <%=@description%>
 * Version: <%=@version%>
 * Generated by Easyfire. Do not modify this code 
 **********************************************************/

package <%=@base_package%>.models;

import <%=@base_package%>.base.ModelEF;
import <%=@base_package%>.services.<%=@service_class%>;
<% @attributes.each do |key,value| %><% if value[:association] %>import <%=@base_package%>.models.<%=value[:association]%>EF;
import <%=@base_package%>.services.<%=value[:association]%>ServiceEF;
<%end%><%end%>
import <%=@base_package%>.delegates.EasyfireDelegate;



import com.google.firebase.database.Exclude;
import com.google.firebase.database.IgnoreExtraProperties;
import android.databinding.BaseObservable;
import android.support.annotation.NonNull;
import java.util.List;
import java.util.ArrayList;

import android.text.TextUtils;

@IgnoreExtraProperties
public class <%= @class_name_ef %> implements ModelEF, Comparable<<%= @class_name_ef %>>{
  
  public static final String COLLECTION = "<%=@collection_name%>";
  
  //Firebase attributes
  @Exclude
  private String key;
  
  @Exclude
  private List<Class> parents = new ArrayList<>();
  
  @Exclude
  private String[] parentKeys = new String[]{<%=@parents.map{|e| "\"\""}.join(",")%>};


  <%@attributes.each do |key,value|%>
  <%="//#{value[:description]}" unless value[:description].blank? %>
  <%="\n  @Exclude " if value[:options].include?(:transient)%>private <%=type_to_java_value(value[:type])%> <%=key%> = <%=java_default_value(value[:type])%>;
  <%end%>

  //Construtores
  public <%=@class_name_ef%>(){}
  
  public <%=@class_name_ef%>(String key){
    this.key = key;
  }
  
  //Getters e Setters
  
  @Exclude
  public String getKey(){
    return this.key;
  }
  
  @Exclude
  public void setKey(String key){
    this.key = key;
  }
  
  @Exclude
  public List<Class> getParents(){
    return this.parents;
  }
  
  @Exclude
  public void setParents(List<Class> parents){
    this.parents = parents;
  }
  
  @Exclude
  public String[] getParentKeys(){
    return this.parentKeys;
  }
  
  @Exclude
  public void setParentKeys(String[] parentKeys){
    this.parentKeys = parentKeys;
  }
  
  @Exclude 
  public void addParentKey(Class clazz,String parentKey){
    this.parentKeys[getParentLevel(clazz)] = parentKey;
  }
  
  @Exclude
  public int getParentLevel(Class clazz){
    return this.parents.indexOf(clazz);
  }
  
  
  
  @Exclude
  public String getPath(){
      
    String path = COLLECTION.concat("/").concat(TextUtils.join("/",parentKeys));
    if(!path.endsWith("/")){
        path.concat("/");
    }
    
    return  path.concat(key);
  
  }

  
  
  <%@attributes.each do |key,value|%>
  <%if value[:association] == nil %>
  <%="@Exclude" if value[:options].include?(:transient)%>
  public <%=type_to_java_value(value[:type])%> get<%=key.to_s.camelcase%>(){
    return this.<%=key%>;
  }
  <%elsif type_to_java_value(value[:type]) != @name%>
  @Exclude
  public void get<%=key.to_s.camelcase%>(final EasyfireDelegate<<%=type_to_java_value(value[:type])%>> delegate) {

       if (this.<%=type_to_java_value(value[:type]).uncapitalize%> == null) {
           new <%=type_to_java_value(value[:type]).gsub(/EF/,"ServiceEF")%>().retrieve(this.<%=type_to_java_value(value[:type]).uncapitalize.gsub(/EF/,"EFPath")%>, new EasyfireDelegate<<%=type_to_java_value(value[:type])%>>() {
               @Override
               public void changed(<%=type_to_java_value(value[:type])%> o) {
                   <%=type_to_java_value(value[:type]).uncapitalize%> = o;
                   delegate.changed(o);
               }

               @Override
               public void error(Object object) {
                   delegate.error(object);
               }
           });
       } else {
           delegate.changed(this.<%=type_to_java_value(value[:type]).uncapitalize%>);
       }
   }
  <%end%>
  

  public void set<%=key.to_s.camelcase%>(<%=type_to_java_value(value[:type])%> <%=key%>){
   this.<%=key%> = <%=key%>;
   <%if @parents.include?(value[:type].to_s.gsub("EF","").to_sym)%>
   this.parentKeys[<%=@parents.index(value[:type].to_s.gsub("EF","").to_sym)%>] = this.<%=key%>.getKey();
   this.<%=key.to_s.gsub(/EF/,"EFPath")%> = this.<%=key%>.getPath();
   <%end %>
   <%if key.to_s.end_with?("EFPath") and @belongs_to[key.to_s.gsub(/EFPath/,'').camelcase.to_sym][:load] == :eager %>
        this.get<%=key.to_s.camelcase%>();
   <%end%>
  } 

  <%end%>	

  @Override
  public String toString() {
    return "<%=@class_name_ef%>{" +
     "key='" + key + '\'' +
     <%@attributes.keys.each do |a|%>", <%=a%>='" + <%=a%> + '\'' +
     <%end%>"}";
  }
  
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
        
    <%=@declaration%> = (<%=@class_name_ef%> ) o;
        
    return key != null ? key.equals(<%=@object_name_ef%>.key) : <%=@object_name_ef%>.key == null;

  }
  
  public boolean equalsContent(Object o) {
      if (this == o) return true;
      if (o == null || getClass() != o.getClass()) return false;
      if (!super.equals(o)) return false;

      <%=@declaration%> = (<%=@class_name_ef%> ) o;
      
      <%@attributes.keys.each do |a|%>
      if (<%=a%> != null ? !<%=a%>.equals(<%=@object_name_ef%>.<%=a%>) : <%=@object_name_ef%>.<%=a%> != null) {
        return false;
      }
      <%end%>
          
      return true;

  }
  
  @Override
  public int hashCode() {
    return key != null ? key.hashCode() : 0;
  }
  
  
  public boolean isChild(){
    return parents != null;
  }
  
  @Override
  public int compareTo(@NonNull <%=@declaration%>) {
      return this.key.compareTo(<%=@object_name_ef%>.getKey());
  }
  
  public void store(EasyfireDelegate<<%=@class_name_ef%>> delegate){
      new <%=@service_class%>().store(this,delegate);
  }

  public void delete(EasyfireDelegate<Boolean> delegate){
      new <%=@service_class%>().delete(this,delegate);
  }
  
  
  
  
}
